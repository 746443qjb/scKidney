# 选择保留的单细胞
if (select == "high") {
seurat <- subset(seurat, subset = doublet_high == "Singlet")
} else if (select == "low") {
seurat <- subset(seurat, subset = doublet_low == "Singlet")
}
return(seurat)
}
# 示例用法：
# seurat_filtered <- KidneyDoublet(seurat = your_seurat_object, PC = pcs, rate = 8, select = "high")
roxygen2::roxygenise()
#' KidneyDoublet
#'
#' This function identifies and removes doublets from a Seurat object using the DoubletFinder package.
#'
#' @param seurat A Seurat object to be processed.
#' @param PC The number of Principal Components (PCs) to use, which can be obtained from KidneyPC.
#' @param rate The rate of doublets per 1000 cells, default is 8.
#' @param select Either "high" or "low" to determine the method of doublet removal.
#' @return A filtered Seurat object without doublets.
#' @export
KidneyDoublet <- function(seurat, PC, rate = 8, select = "high") {
# 参数检查
if (missing(seurat)) {
stop("You must provide a Seurat object.")
}
if (missing(PC)) {
stop("You must provide the number of PCs to use.")
}
if (!(select %in% c("high", "low"))) {
stop("Select must be either 'high' or 'low'.")
}
# 寻找双细胞
sweep.res.list <- paramSweep(seurat, PCs = 1:PC, sct = FALSE)
sweep.stats <- summarizeSweep(sweep.res.list, GT = FALSE)
bcmvn <- find.pK(sweep.stats)
mpK <- as.numeric(as.vector(bcmvn[bcmvn$BCmetric == max(bcmvn$BCmetric), ]$pK))
DoubletRate <- ncol(seurat) * rate * 1e-6  # 按每增加 1000 个细胞，双细胞比率增加千分之 8 来计算
nExp_poi <- round(DoubletRate * ncol(seurat))
homotypic.prop <- modelHomotypic(seurat@meta.data$seurat_clusters)
nExp_poi.adj <- round(nExp_poi * (1 - homotypic.prop))
# 标记双细胞
seurat <- doubletFinder(seurat, PCs = 1:PC, pN = 0.25, pK = mpK, nExp = nExp_poi, reuse.pANN = FALSE, sct = FALSE)
colnames(seurat@meta.data)[ncol(seurat@meta.data)] <- "doublet_low"
seurat <- doubletFinder(seurat, PCs = 1:PC, pN = 0.25, pK = mpK, nExp = nExp_poi.adj, reuse.pANN = FALSE, sct = FALSE)
colnames(seurat@meta.data)[ncol(seurat@meta.data)] <- "doublet_high"
# 选择保留的单细胞
if (select == "high") {
seurat <- subset(seurat, subset = doublet_high == "Singlet")
} else if (select == "low") {
seurat <- subset(seurat, subset = doublet_low == "Singlet")
}
return(seurat)
}
roxygen2::roxygenise()
roxygen2::roxygenise()
library(scMetabolism)
markers_class1 <- list(
PT = c("LRP2", "CUBN", "SLC13A1"),
TL = c("CRYAB", "TACSTD2", "SLC44A5", "KLRG2", "COL26A1", "BOC"),
TAL = c("CASR", "SLC12A1", "UMOD"),
DCT = c("SLC12A3", "CNNM2", "FGF13", "KLHL3", "LHX1", "TRPM6"),
CNT = c("SLC8A1", "SCN2A", "HSD11B2", "CALB1"),
PC = c("GATA3", "AQP2", "AQP3"),
IC = c("ATP6V0D2", "ATP6V1C2", "TMEM213", "CLNK"),
EC = c("CD34", "PECAM1", "PTPRB", "MEIS2", "FLT1", "EMCN"),
VSM_P = c("NOTCH3", "PDGFRB", "ITGA8"),
FIB = c("COL1A1", "COL1A2", "C7", "NEGR1", "FBLN5", "DCN", "CDH11"),
IMM = c("PTPRC")
)
markers_class2 <- list(
ATL = c("CLDN1", "AKR1B1", "CLDN4", "BCL6", "SH3GL3", "BCAS1", "CLCNKA", "CLDN10", "PROX1"),
B_cell = c("BANK1", "BLK", "MS4A1", "BACH2"),
CCD_IC_A = c("SLC4A1", "SLC26A7", "HS6ST3", "NXPH2", "LEF1", "ADGRF5"),
CCD_PC = c("SCNN1G", "SCNN1B", "FXYD4", "SOX5", "PDE10A", "SLC25A29", "ST6GAL1", "PAPPA"),
cDC = c("ITGAX", "HLA-DQA1", "HLA-DRA", "CSF2RA", "CIITA", "WDFY4", "FLT3", "ZNF366", "CADM1", "ZBTB46", "CLEC9A"),
CNT = c("KITLG", "PCDH7"),
CNT_IC_A = c("SLC4A1", "SLC26A7", "SLC8A1", "SCN2A", "CALB1"),
CNT_PC = c("RALYL", "TOX", "SGPP1", "SCNN1G", "SCNN1B", "KCNIP1"),
C_TAL = c("NELL1", "ESRRB", "EGF", "PPM1E", "GP2", "ENOX1", "TMEM207", "TMEM52B", "CLDN16", "WNK1"),
DCT1 = c("TRPM7", "ADAMTS17", "ITPKB", "ZNF385D", "HS6ST2"),
DCT2 = c("TRPV5", "SLC8A1", "SCN2A", "HSD11B2", "CALB1"),
DTL1 = c("SATB2", "JAG1", "ADGRL3", "ID1"),
DTL2 = c("VCAM1", "SLC39A8", "AQP1", "LRRC4C", "LRP2", "UNC5D", "SATB2"),
DTL3 = c("CLDN1", "AKR1B1", "CLDN4", "BCL6", "SH3GL3", "SLC14A2", "SMOC2"),
EC_AEA = c("BTNL9", "ADAMTS6", "PALMD", "AQP1", "TM4SF1", "VEGFC", "CCDC3", "CDH5", "SERPINE2", "FBLN5", "CXCL12", "SOX17"),
EC_AVR = c("CEACAM1", "DNASE1L3", "PLVAP", "GPM6A", "EDIL3", "TLL1", "ZNF385D", "NR2F2"),
EC_DVR = c("BTNL9", "ADAMTS6", "PALMD", "AQP1", "TM4SF1", "MCTP1", "SLC14A1", "ENPP2", "LYPD6B"),
EC_GC = c("EMCN", "HECW2", "PLAT", "ITGA8", "EHD3", "KDR", "SOST"),
EC_LYM = c("MMRN1", "CD36", "TBX1", "PKHD1L1", "PROX1"),
EC_PTC = c("CEACAM1", "DNASE1L3", "PLVAP", "PITPNC1", "GRB10", "SLCO2A1", "RAPGEF4"),
FIB = c("LAMA2", "GGT5", "LUM", "AEBP1", "C1S", "SFRP1", "MEG3", "CXCL12"),
IC_B = c("SLC4A9", "SLC35F3", "SLC26A4", "INSRR", "TLDC2"),
IMCD = c("FXYD4", "SOX5", "PHACTR1", "PCDH7", "SLC14A2", "HS3ST5"),
MAC_M2 = c("F13A1", "MRC1", "CD163", "STAB1", "SLC1A3", "CD14", "FOLR2"),
MAST = c("MS4A2", "CPA3", "KIT"),
MC = c("PIP5K1B", "ROBO1", "PIEZO2", "DAAM2", "PHTF2", "GATA3", "POSTN"),
MD = c("NOS1", "ROBO2", "CALCR", "PPFIA2", "PAPPA2"),
MDC = c("MSR1", "ITGAX", "HLA-DQA1", "HLA_DRB1", "CSF2RA", "CD14", "TRPM2"),
M_FIB = c("SYT1", "TNC", "PLCXD3", "GABRG3", "GREB1L", "KCNK2"),
M_TAL = c("NELL1", "ESRRB", "EGF", "CLDN14", "PROX1", "MFSD4A", "KCTD16", "RAP1GAP", "ANK2", "CYFIP2"),
MYOF = c("SYNPO2", "PCDH7", "KCNMA1", "LMOD1", "TTLL7", "DTNA", "COL14A1"),
NEU = c("S100A9", "S100A8", "IFITM2", "FCGR3B", "CD1C"),
ncMON = c("CTSS", "IRAK3", "TCF7L2", "TNFRSF1B", "FCN1", "HLA-DRA", "FCGR3A"),
NKT = c("CD96", "CD247", "RUNX3", "GNLY", "NKG7", "CCL5", "KLRF1", "CCL4", "GZMA"),
OMCD_IC_A = c("SLC4A1", "SLC26A7", "KIT", "AQP6", "STAP1", "FAM184B", "CALCA"),
OMCD_PC = c("SCNN1G", "SCNN1B", "FXYD4", "SOX5", "SYK", "FAM81A", "PROM1", "KCNK13"),
PapE = c("TACSTD2", "TP63", "GPX2", "FXYD3", "KRT5"),
pDC = c("IRF8", "CUX2", "P2RY14", "IL3RA", "CLEC4C"),
PEC = c("CLDN1", "VCAM1", "CFH", "RBFOX1", "ALDH1A2"),
PL = c("IGKC", "TENT5C", "MZB1", "FCRL5", "CD38", "JCHAIN"),
POD = c("PTPRQ", "WT1", "NTNG1", "NPHS1", "NPHS2", "CLIC5", "PODXL"),
PT_S1 = c("SLC5A12", "SLC13A3", "SLC22A6", "PRODH2", "SLC5A2", "SLC22A8"),
PT_S2 = c("SLC5A12", "SLC13A3", "SLC22A6", "SLC34A1", "SLC22A7"),
PT_S3 = c("SLC22A7", "MOGAT1", "SLC5A11", "SLC22A24", "SLC7A13", "SLC5A8", "ABCC3", "SATB2"),
REN = c("PIP5K1B", "ROBO1", "REN", "PDE10A", "ABCC8", "COL13A1", "GRID2"),
SC_NEU = c("CDH19", "NRXN1", "GINS3"),
T_cell = c("CD96", "CD247", "THEMIS", "BCL11B", "CAMK4", "IL7R"),
VSMC = c("NTRK3", "MYH11", "RGS6", "ADRA1A", "LDB3", "MCAM"),
VSMC_P = c("NTRK3", "CCDC102B", "RGS5", "ABCC9", "ADCY3", "ADGRB3"))
markers_list <- list(
class_1 = markers_class1,
class_2 = markers_class2
)
saveRDS(markers_list, file = "E:/R包/scKidney/inst/extdata.rds")
saveRDS(markers_list, file = "E:/R包/scKidney/inst/extdata/markers_list.rds")
roxygen2::roxygenise()
library(DoubletFinder)
library(devtools)
devtools::document()  # 更新帮助文档
devtools::document()  # 更新帮助文档
devtools::document()  # 更新帮助文档
library(devtools)
devtools::document()  # 更新帮助文档
devtools::document()
devtools::build()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::check()
devtools::check()
devtools::check()
R CMD check scKidney
devtools::document()
devtools::build()
devtools::install()
#' KidneyPC
#'
#' This function determines the optimal number of Principal Components (PCs) to use in downstream analysis of a Seurat object.
#'
#' @param seurat A Seurat object that has been normalized, scaled, and processed with PCA or other dimensionality reduction methods.
#' @param reduction The dimensionality reduction method to use (e.g., "pca", "harmony"). Must exist in the Seurat object.
#' @param cum The cumulative percentage threshold to use for selecting PCs.
#' @param var The minimum variation percentage for selecting PCs.
#' @return The number of PCs that meet the given criteria.
#' @export
KidneyPC <- function(seurat, reduction = "pca", cum = 90, var = 5) {
# 参数检查
if (missing(seurat)) {
stop("You must provide a Seurat object.")
}
if (!reduction %in% names(seurat@reductions)) {
stop("The specified reduction method does not exist in the Seurat object.")
}
# 计算每个 PC 的标准差和累积百分比
pct <- seurat[[reduction]]@stdev / sum(seurat[[reduction]]@stdev) * 100
cumu <- cumsum(pct)
# 找到累积百分比超过 cum% 且对应 PC 的变异度小于 var% 的第一个 PC
co1 <- which(cumu > cum & pct < var)[1]
# 找到前后两个 PC 的变异度差异超过 0.1% 的位置
co2 <- sort(which((pct[1:(length(pct) - 1)] - pct[2:length(pct)]) > 0.1), decreasing = TRUE)[1] + 1
# 确定最终的最佳 PC 数量
pcs <- min(co1, co2, na.rm = TRUE)
# 绘图部分
plot_df <- data.frame(pct = pct, cumu = cumu, rank = 1:length(pct))
p <- ggplot(plot_df, aes(x = cumu, y = pct, label = rank, color = rank > pcs)) +
geom_text(check_overlap = TRUE, size = 3.5, fontface = "bold") +
geom_vline(xintercept = cum, color = "grey", linetype = "dashed") +
geom_hline(yintercept = min(pct[pct > var], na.rm = TRUE), color = "grey", linetype = "dashed") +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "skyblue")) +
labs(
title = "Optimal Principal Components Selection",
x = "Cumulative Percentage",
y = "Percentage of Variation"
) +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none"
)
print(p) # 确保绘图在函数内部被正确显示
return(pcs)
}
# 示例用法：
# pcs <- KidneyPC(seurat = your_seurat_object, reduction = "pca", cum = 90, var = 5)
roxygen2::roxygenise()
devtools::document()  # 生成或更新手册文件
devtools::check()     # 检查包是否有错误或警告
detach("package:scKidney", unload = TRUE)
devtools::load_all(".")
?KidneyPC  # 检查帮助文档
KidneyPC  # 检查函数的定义
devtools::document()  # 生成或更新手册文件
devtools::check()     # 检查包是否有错误或警告
roxygen2::roxygenise()
devtools::document()  # 生成或更新手册文件
devtools::check()     # 检查包是否有错误或警告
devtools::document()  # 生成或更新手册文件
devtools::check()     # 检查包是否有错误或警告
IMM <- readRDS("E:/LN/老鼠/重新分析/IMM/IMM.rds")
View(IMM)
IMMm <- readRDS("E:/LN/老鼠/重新分析/7-24/IMMm.rds")
View(IMMm)
library(Seurat)
library(SeuratDisk)
DotPlot(IMMm,"Cd88")
View(IMMm)
DotPlot(IMMm,"C5ar1")
ECmscp <- readRDS("E:/LN/老鼠/重新分析/ECmscp.rds")
View(ECmscp)
EC <- readRDS("E:/LN/老鼠/重新分析/GEC/EC.rds")
View(EC)
DotPlot(EC,"C5ar1")
View(EC)
DotPlot(EC,"C5ar2")
View(EC)
DotPlot(EC,"Bmpr2")
DotPlot(EC,"Bmpr1a")
DotPlot(EC,"Bmpr1b")
DotPlot(EC,"Acvrl1")
DotPlot(EC,"Acvr1")
DotPlot(EC,"Bmpr1b")
library(roxygen2)
library(devtools)
library(roxygen2)
document()  # 更新帮助文档和 NAMESPACE 文件
library(devtools)
library(roxygen2)
document()  # 更新帮助文档和 NAMESPACE 文件
document()
document()
document()
library(devtools)
library(roxygen2)
document()  # 生成帮助文档和 NAMESPACE 文件
document()
document()
devtools::document("E:/R包/scKidney/R/KidneyH5")
devtools::document("E:/R包/scKidney")
devtools::document("E:/R包/scKidney")
#' KidneyH5
#'
#' This function converts a Seurat object to an H5AD file format.
#'
#' @param seurat_obj A Seurat object to be converted.
#' @param output_path A character string specifying the path where the H5AD file will be saved.
#' @details This function requires the installation of the reticulate package and the Python anndata library.
#' It is recommended to run `joinlayers()` on Seurat v5 objects before using this function to ensure proper compatibility.
#' This function supports dynamic addition of dimensionality reduction embeddings stored in the Seurat object.
#' @return No return value. The H5AD file will be saved at the specified location.
#' @export
#' @examples
#' \dontrun{
#' library(Seurat)
#' library(KidneyH5)
#'
#' # Example usage
#' sce <- CreateSeuratObject(counts = matrix(runif(10000), nrow = 100, ncol = 100))
#' sce <- SCTransform(sce)
#' kidneyH5(sce, "sce.h5ad")
#' }
#'
kidneyH5 <- function(seurat_obj, output_path) {
# Load required Python libraries
anndata <- reticulate::import("anndata", delay_load = TRUE)
np <- reticulate::import("numpy", delay_load = TRUE)
pd <- reticulate::import("pandas", delay_load = TRUE)
counts_matrix <- Seurat::GetAssayData(seurat_obj, assay = 'RNA', layer = 'counts')
if (!inherits(counts_matrix, "matrix") && !inherits(counts_matrix, "dgCMatrix")) {
counts_matrix <- as.matrix(counts_matrix)
}
counts_matrix <- Matrix::t(counts_matrix)
counts_matrix <- as(counts_matrix, "dgCMatrix")
meta_data <- seurat_obj@meta.data
meta_data$barcode <- rownames(meta_data)
adata <- anndata$AnnData(X = counts_matrix, obs = pd$DataFrame(meta_data))
gene_names <- colnames(counts_matrix)
adata$var_names <- np$array(gene_names)
if (length(seurat_obj@reductions) > 0) {
for (reduction_name in names(seurat_obj@reductions)) {
embeddings <- Seurat::Embeddings(seurat_obj, reduction = reduction_name)
obsm_key <- paste0("X_", reduction_name)
adata$obsm[obsm_key] <- np$array(embeddings)
}
}
adata$write_h5ad(output_path)
}
# 示例用法：
#kidneyH5(sce, "sce.h5ad")
devtools::document("E:/R包/scKidney")
rm(list = c("kidneyH5"))
devtools::load_all("E:/R包/scKidney")
devtools::document()
?scSeurat
library(devtools)
document()
install()
detach("package:scKidney", unload = TRUE)
library(scKidney)
?scSeurat
library(devtools)
document()
?scSeurat
library(devtools)
> document()
library(devtools)
document()
?scSeurat
?KidneyCell
KidneyCell
?scSeurat
?KidneyQC
?scSeurat
library(devtools)
document()
library(devtools)
> document()''
library(devtools) document()''
document()
document()
document()
#'   \item{meta.data}{A data frame containing cell metadata.}
#'   \item{dimensional reductions}{Dimensionality reduction embeddings (e.g., PCA, UMAP, t-SNE).}
#' @details The function first attempts to load raw counts from `adata$raw$X`. If raw counts are not available,
#' it falls back to normalized counts from `adata$X`. The function also extracts cell metadata from `adata$obs`,
#' gene names from `adata$var` (or `adata$raw$var` if raw counts are used), and dimensional reduction embeddings from `adata$obsm`.
#'
#' The gene and cell names are added to the counts matrix to ensure compatibility with Seurat.
#' Dimensional reduction embeddings are added to the Seurat object under their respective names.
#'
#' @export
scSeurat <- function(h5ad_path) {
library(reticulate)
library(Seurat)
library(Matrix)
anndata <- import("anndata", convert = FALSE)
adata <- anndata$read_h5ad(h5ad_path)
use_raw <- FALSE
var_names <- NULL
if (!py_is_null_xptr(adata$raw)) {  # 检查 adata$raw 是否为空
tryCatch({
if (!is.null(adata$raw$X)) {  # 检查 raw$X 是否存在
use_raw <- TRUE
var_names <- as.character(reticulate::py_to_r(adata$raw$var$index$to_list()))
}
}, error = function(e) {
use_raw <- FALSE
})
}
if (use_raw) {
message("Using raw counts matrix from adata$raw$X")
counts <- adata$raw$X
} else {
message("Using normalized counts matrix from adata$X")
counts <- adata$X
var_names <- as.character(reticulate::py_to_r(adata$var$index$to_list()))
}
counts <- reticulate::py_to_r(counts)
if (inherits(counts, "dgRMatrix") || inherits(counts, "dgCMatrix")) {
message("Counts matrix is already a sparse matrix")
} else {
counts <- as(Matrix::sparseMatrix(
i = counts@i + 1,
p = counts@p,
x = counts@x,
dims = c(counts@shape[[1]], counts@shape[[2]])
), "dgCMatrix")
}
counts <- t(counts)
obs_names <- as.character(reticulate::py_to_r(adata$obs$index$to_list()))
if (length(var_names) != nrow(counts)) {
stop("Number of gene names does not match the number of rows in counts")
}
if (length(obs_names) != ncol(counts)) {
stop("Number of cell names does not match the number of columns in counts")
}
rownames(counts) <- var_names
colnames(counts) <- obs_names
meta_data <- reticulate::py_to_r(adata$obs)
rownames(meta_data) <- obs_names  # 确保元数据行名与细胞名称一致
seurat_obj <- CreateSeuratObject(
counts = counts,
meta.data = meta_data,
assay = "RNA"
)
obsm_dict <- reticulate::py_to_r(dict(adata$obsm))
for (key in names(obsm_dict)) {
embedding <- obsm_dict[[key]]
rownames(embedding) <- colnames(seurat_obj)
colnames(embedding) <- paste0(key, "_", 1:ncol(embedding))
fixed_key <- gsub("^X_", "", key)
fixed_key <- paste0(fixed_key, "_")
seurat_obj[[fixed_key]] <- CreateDimReducObject(
embeddings = embedding,
key = fixed_key,
assay = "RNA"
)
}
# 返回 Seurat 对象
return(seurat_obj)
}
#' scSeurat
#'
#' This function converts an AnnData object stored in an H5AD file into a Seurat object.
#' It supports loading raw counts (if available) or normalized counts and includes metadata
#' and dimensionality reduction embeddings.
#'
#' @param h5ad_path A string specifying the file path to the H5AD file.
#' @return A Seurat object with the following components:
#'   \item{counts}{A sparse matrix containing raw or normalized counts.}
#'   \item{meta.data}{A data frame containing cell metadata.}
#'   \item{dimensional reductions}{Dimensionality reduction embeddings (e.g., PCA, UMAP, t-SNE).}
#' @details The function first attempts to load raw counts from `adata$raw$X`. If raw counts are not available,
#' it falls back to normalized counts from `adata$X`. The function also extracts cell metadata from `adata$obs`,
#' gene names from `adata$var` (or `adata$raw$var` if raw counts are used), and dimensional reduction embeddings from `adata$obsm`.
#'
#' The gene and cell names are added to the counts matrix to ensure compatibility with Seurat.
#' Dimensional reduction embeddings are added to the Seurat object under their respective names.
#'
#' @export
scSeurat <- function(h5ad_path) {
library(reticulate)
library(Seurat)
library(Matrix)
anndata <- import("anndata", convert = FALSE)
adata <- anndata$read_h5ad(h5ad_path)
use_raw <- FALSE
var_names <- NULL
if (!py_is_null_xptr(adata$raw)) {  # 检查 adata$raw 是否为空
tryCatch({
if (!is.null(adata$raw$X)) {  # 检查 raw$X 是否存在
use_raw <- TRUE
var_names <- as.character(reticulate::py_to_r(adata$raw$var$index$to_list()))
}
}, error = function(e) {
use_raw <- FALSE
})
}
if (use_raw) {
message("Using raw counts matrix from adata$raw$X")
counts <- adata$raw$X
} else {
message("Using normalized counts matrix from adata$X")
counts <- adata$X
var_names <- as.character(reticulate::py_to_r(adata$var$index$to_list()))
}
counts <- reticulate::py_to_r(counts)
if (inherits(counts, "dgRMatrix") || inherits(counts, "dgCMatrix")) {
message("Counts matrix is already a sparse matrix")
} else {
counts <- as(Matrix::sparseMatrix(
i = counts@i + 1,
p = counts@p,
x = counts@x,
dims = c(counts@shape[[1]], counts@shape[[2]])
), "dgCMatrix")
}
counts <- t(counts)
obs_names <- as.character(reticulate::py_to_r(adata$obs$index$to_list()))
if (length(var_names) != nrow(counts)) {
stop("Number of gene names does not match the number of rows in counts")
}
if (length(obs_names) != ncol(counts)) {
stop("Number of cell names does not match the number of columns in counts")
}
rownames(counts) <- var_names
colnames(counts) <- obs_names
meta_data <- reticulate::py_to_r(adata$obs)
rownames(meta_data) <- obs_names  # 确保元数据行名与细胞名称一致
seurat_obj <- CreateSeuratObject(
counts = counts,
meta.data = meta_data,
assay = "RNA"
)
obsm_dict <- reticulate::py_to_r(dict(adata$obsm))
for (key in names(obsm_dict)) {
embedding <- obsm_dict[[key]]
rownames(embedding) <- colnames(seurat_obj)
colnames(embedding) <- paste0(key, "_", 1:ncol(embedding))
fixed_key <- gsub("^X_", "", key)
fixed_key <- paste0(fixed_key, "_")
seurat_obj[[fixed_key]] <- CreateDimReducObject(
embeddings = embedding,
key = fixed_key,
assay = "RNA"
)
}
# 返回 Seurat 对象
return(seurat_obj)
}
# 示例用法：
# seurat <- scSeurat("sce.h5ad")
document()
document()
